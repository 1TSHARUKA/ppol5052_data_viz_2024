---
title: "Geospatial data in R"
Aruthor: Tian
format: html
editor: visual
execute: 
  warning: false
  message: false
---

# Activity 1: Spatial data manipulation to construct + plot a DC-Maryland-Virginia metropolitan area plot

In this activity, you'll construct a DC-Maryland-Virginia metropolitan area plot. A metropolitan statistical area (MSA) is a sub-category of a core-based statistical area (CBSA) within the Census Bureau data files.

-   First, use the `tigris` package and the `core_based_statistical_areas()` command to download polygons for all US CBSAs (the default), setting the year to 2020

-   Then use the following `GEOID` to filter to the Washington-Arlington-Alexandria CBSA: 47900.

    -   [IDs for CBSAs found here](https://www2.census.gov/programs-surveys/cps/methodology/2015%20Geography%20Cover.pdf)

-   [Uncomment](https://bookdown.org/yihui/rmarkdown-cookbook/comments.html) the `get_acs` command provided to pull poverty information for DC (FIPs code = 11), Maryland (FIPs code = 24), and Virginia (FIPs code = 51). Note that this will also pull the polygons assocated with the tracts.

-   Use `st_intersects()` to only retain the tracts that fall within the metropolitan boundary. Call this new spatial dataframe: `dc_md_va_msatracts`

    -   This should reduce the count of tracts from 3879 tracts to 1550 tracts

    ```{r}
    install.packages("sf")
    ```

    ```{r}
    # API code: a84e85f7eec9f2943cf7f679d07366e3c1b61d13
    ```

```{r}
# Load required libraries
library(tigris)
library(tidycensus)
library(sf)
library(dplyr)
library(ggplot2)

cbsas <- core_based_statistical_areas(year = 2020)
washington_cbsa <- cbsas %>% filter(GEOID == "47900")


poverty_vars <- c("B17020_001", "B17020_002")  

dc_md_va_tracts <- get_acs(
  geography = "tract",
  variables = poverty_vars,
  state = c("11", "24", "51"),
  year = 2020,
  output = "wide",
  survey = "acs5",
  geometry = TRUE,
  cache_table = TRUE,
  progress_bar = FALSE
)

dc_md_va_tracts <- dc_md_va_tracts %>%
  mutate(poverty_rate = B17020_002E / B17020_001E)

tracts_within_cbsa <- dc_md_va_tracts %>%
  filter(st_intersects(geometry, washington_cbsa, sparse = FALSE))
```

## Activity 2: create two plots of the results

-   Plot one: shows all tracts across DC, MD, and VA; colors the tracts within the MSA green and the remainder of the tracts gray

-   Plot two: uses the dataset filtered to tracts within the MSA. Creates a choropleth plot of poverty rates, grouped into the following buckets:

    -   0-5% poverty rate
    -   6-10% poverty rate
    -   11-20% poverty rate
    -   21% or higher poverty rate

-   If you have extra time, for the first plot, use the `tigris` code below to pull the state boundaries and add the state boundaries for DC, MD, and VA along with a label for the state

```{r}
#| echo: false
#| output: true
state_boundaries <- tigris::states(year = 2020, progress_bar = FALSE)
dc_md_va_states <- state_boundaries %>% filter(GEOID %in% c(11, 24, 51))
```

```{r}
#| echo: true
#| output: true

ggplot() +
  geom_sf(data = dc_md_va_tracts, fill = "gray80", color = NA) +
  geom_sf(data = tracts_within_cbsa, fill = "green", color = NA) +
  geom_sf(data = dc_md_va_states, fill = NA, color = "black", size = 0.7) +
  theme_minimal() +
  labs(
    title = "All Tracts Across DC, Maryland, and Virginia",
    subtitle = "MSA Tracts Highlighted in Green"
  )

```

```{r}
# Solution
#| echo: false
#| output: true
ggplot(dc_md_va_tracts) +
  geom_sf(aes(fill = st_intersects(geometry, washington_cbsa, sparse = FALSE)), color = "white") +
  geom_sf(data = dc_md_va_states, color = "black", size = 0.7, alpha = 0.1) +
  geom_sf_label(data = dc_md_va_states, aes(label = STUSPS), size = 2) +
  theme_void() +
  scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "gray")) +
  labs(fill = "Is Tract within MSA?")

```

```{r}

tracts_within_cbsa <- tracts_within_cbsa %>%
  mutate(poverty_rate_group = case_when(
    poverty_rate <= 0.05 ~ "0-5%",
    poverty_rate > 0.05 & poverty_rate <= 0.10 ~ "6-10%",
    poverty_rate > 0.10 & poverty_rate <= 0.20 ~ "11-20%",
    poverty_rate > 0.20 ~ "21% or higher"
  ))


ggplot() +
  geom_sf(data = tracts_within_cbsa, aes(fill = poverty_rate_group), color = NA) +
  scale_fill_manual(
    values = c("0-5%" = "lightgreen", "6-10%" = "yellow", 
               "11-20%" = "orange", "21% or higher" = "red"),
    name = "Poverty Rate"
  ) +
  theme_minimal() +
  labs(
    title = "Poverty Rates in the Washington MSA",
    subtitle = "Grouped by Poverty Rate Buckets"
  )

```

```{r}
#| echo: false
#| output: true

# Solution provided
## Create categorical poverty rate measure
tracts_within_cbsa <- tracts_within_cbsa %>%
  mutate(poverty_cat = factor(case_when(
    poverty_rate < 0.06 ~ "0-5%",
    poverty_rate < 0.11 ~ "6-10%",
    poverty_rate < 0.21 ~ "11-20%",
    TRUE ~ "21% or higher"
  ),
  levels = c("0-5%", "6-10%", "11-20%", "21% or higher"),
  ordered = TRUE))

## Plot the poverty categories
ggplot(tracts_within_cbsa) +
  geom_sf(aes(fill = poverty_cat), color = "white") +
  geom_sf(data = dc_md_va_states %>% filter(STUSPS == "DC"),
          color = "black", size = 0.7, alpha = 0.1) + # Changed `width` to `size` for line thickness
  theme_void() +
  labs(fill = "Tract-level poverty rate:") +
  scale_fill_manual(values = c(
    "0-5%" = "darkgreen",
    "6-10%" = "lightgreen",
    "11-20%" = "pink",
    "21% or higher" = "firebrick"
  ))
```

## Activity 3: visualization using hexgrids

For this activity, we provide example code below, based on [this Stack Overflow post](https://stackoverflow.com/questions/76153155/creating-a-hexagonal-map-from-a-shapefile-in-r) for how to create a hexgrid for DC

In this activity, adapt that code by:

-   Reading in the following `geojson` file with locations of CCTV cameras in DC: `cctv-street-cameras.geojson`
-   Creating a similar hexgrid map where the hexes are shaded by the count of CCTV cameras within its boundary

```{r}
homeless_facilities <- sf::st_read("03_geospatial_inputdata/Homeless_Service_Facilities.geojson")

dc_polygon <- dc_md_va_states %>% filter(STUSPS == "DC")
hex_grid <- st_make_grid(dc_polygon,
                        cellsize = 0.01,
                        what = 'polygons',
                        square = FALSE) %>%
            st_as_sf() 

hex_grid_dc <- hex_grid[c(unlist(st_contains(dc_polygon, hex_grid)),
                         unlist(st_overlaps(dc_polygon, hex_grid))), ] 

## add poverty rate
counts_per_hex <- st_intersects(hex_grid_dc,
                      homeless_facilities %>% st_transform(crs = st_crs(hex_grid_dc)))  
hex_grid_dc$homeless_facilities_counts <- lengths(counts_per_hex)
            

ggplot(hex_grid_dc) +
  geom_sf(aes(fill = factor(homeless_facilities_counts))) +
  theme_void() +
  labs(fill = "Count of homeless\nservice facilities") 

```

Repeat with CCTV cameras

```{r}
#| echo: true
#| output: true

cctv_cameras <- sf::st_read("03_geospatial_inputdata/cctv-street-cameras.geojson")

dc_polygon <- dc_md_va_states %>% filter(STUSPS == "DC")


hex_grid <- st_make_grid(dc_polygon,
                         cellsize = 0.01,  
                         what = 'polygons',
                         square = FALSE) %>%
            st_as_sf()  


hex_grid_dc <- hex_grid[c(unlist(st_contains(dc_polygon, hex_grid)),
                          unlist(st_overlaps(dc_polygon, hex_grid))), ]


cctv_per_hex <- st_intersects(hex_grid_dc, 
                              cctv_cameras %>% st_transform(crs = st_crs(hex_grid_dc)))


hex_grid_dc$cctv_camera_count <- lengths(cctv_per_hex)


ggplot(hex_grid_dc) +
  geom_sf(aes(fill = factor(cctv_camera_count)), color = "white") +  
  theme_void() +
  labs(fill = "CCTV Camera Count", title = "CCTV Cameras in Washington D.C.") +
  scale_fill_viridis_d()
```

```{r}
#| echo: false
#| output: true

# Solution

cctv <- sf::st_read("03_geospatial_inputdata/cctv-street-cameras.geojson")
counts_per_hex <- st_intersects(hex_grid_dc,
                      cctv %>% st_transform(crs = st_crs(hex_grid_dc)))  
hex_grid_dc$cctv_counts <- lengths(counts_per_hex)

ggplot(hex_grid_dc) +
  geom_sf(aes(fill = cctv_counts)) +
  theme_void() +
  labs(fill = "Count of CCTV cameras") +
  scale_fill_gradient2(low = "wheat4", high = "firebrick")
            

```
